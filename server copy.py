# --- imports ---
import os
import uuid
import hashlib
import requests
from fastapi import FastAPI, Request, HTTPException, Header
import telebot
from telebot import types
import json
from pathlib import Path

# --- env ---
PUBLIC_BASE_URL    = os.getenv("PUBLIC_BASE_URL", "https://alexabot-kg4y.onrender.com")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "")
MERCHANT_ID        = os.getenv("MERCHANT_ID", "")
SECRET_KEY         = os.getenv("SECRET_KEY", "")
TG_WEBHOOK_SECRET  = os.getenv("TG_WEBHOOK_SECRET", "")

# --- init app & bot (–í–ê–ñ–ù–û: app —Å–æ–∑–¥–∞—ë–º –î–û –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤ @app.*) ---
app = FastAPI()
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN, threaded=False)

# –ü–∞–º—è—Ç—å: –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ chat_id
# chat_id -> { "message_id": int, "order_id": str, "base_text": str }
last_link_msg = {}

# --- helpers ---
# === ACCESS CONTROL (–ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ + –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ) ===
import json
from pathlib import Path

# 1) –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ ID: –≤—Å–µ–≥–¥–∞ –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø (–º–µ–Ω—è–µ—à—å —Ç—É—Ç –≤ –∫–æ–¥–µ)
BASE_WHITELIST = {958579430,8051914154,2095741832,7167283179}  # –¥–æ–±–∞–≤—å —Å—é–¥–∞ –µ—â—ë –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é

# 2) –§–∞–π–ª –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö (–¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞–º–∏) ID
WHITELIST_FILE = Path("whitelist.json")

def load_dynamic_whitelist() -> set[int]:
    if WHITELIST_FILE.exists():
        try:
            with open(WHITELIST_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
                return set(int(x) for x in data)
        except Exception:
            return set()
    return set()

def save_dynamic_whitelist(ids: set[int]) -> None:
    with open(WHITELIST_FILE, "w", encoding="utf-8") as f:
        json.dump(list(ids), f)

# 3) –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
DYNAMIC_WHITELIST: set[int] = load_dynamic_whitelist()

def has_access(chat_id: int) -> bool:
    return (chat_id in BASE_WHITELIST) or (chat_id in DYNAMIC_WHITELIST)

@bot.message_handler(commands=['getid'])
def getid(message):
    bot.send_message(message.chat.id, f"–¢–≤–æ–π chat_id: {message.chat.id}")

@bot.message_handler(commands=['info'])
def info(message):
    if not has_access(message.chat.id):
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    if message.chat.id not in last_link_msg:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return

    try:
        # –¢–µ–∫—Å—Ç –ø–æ—Å–ª–µ /info
        parts = message.text[len("/info"):].strip().split("|")
        trader   = parts[0].strip() if len(parts) > 0 else ""
        details  = parts[1].strip() if len(parts) > 1 else ""
        time     = parts[2].strip() if len(parts) > 2 else ""
        amount   = parts[3].strip() if len(parts) > 3 else ""

        extra = ""
        if trader:  extra += f"\n–¢—Ä–µ–π–¥–µ—Ä: {trader}"
        if details: extra += f"\n–†–µ–∫–≤–∏–∑–∏—Ç: {details}"
        if time:    extra += f"\n–í—Ä–µ–º—è: {time}"
        if amount:  extra += f"\n–°—É–º–º–∞: {amount}"

        # –ë–µ—Ä—ë–º –±–∞–∑–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ–º extra
        info_text = last_link_msg[message.chat.id]["base_text"] + extra

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=last_link_msg[message.chat.id]["message_id"],
            text=info_text,
            disable_web_page_preview=True
        )

    except Exception as e:
        bot.send_message(message.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫–æ–º–∞–Ω–¥—ã: {e}\n\n–ò—Å–ø–æ–ª—å–∑—É–π: /info —Ç—Ä–µ–π–¥–µ—Ä | —Ä–µ–∫–≤–∏–∑–∏—Ç | –≤—Ä–µ–º—è | —Å—É–º–º–∞")

ADMIN_ID = 958579430  # —Ç–≤–æ–π id

# /add <chat_id> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –≤ BASE_WHITELIST)
@bot.message_handler(commands=['add'])
def add_user(message):
    if message.chat.id not in BASE_WHITELIST:
        bot.send_message(message.chat.id, "‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤")
        return
    parts = message.text.strip().split()
    if len(parts) != 2 or not parts[1].isdigit():
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π: /add <chat_id>")
        return
    new_id = int(parts[1])
    DYNAMIC_WHITELIST.add(new_id)
    save_dynamic_whitelist(DYNAMIC_WHITELIST)
    bot.send_message(message.chat.id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_id} –¥–æ–±–∞–≤–ª–µ–Ω")

# /delete <chat_id> ‚Äî —É–±—Ä–∞—Ç—å –¥–æ—Å—Ç—É–ø (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –≤ BASE_WHITELIST)
@bot.message_handler(commands=['delete'])
def delete_user(message):
    if message.chat.id not in BASE_WHITELIST:
        bot.send_message(message.chat.id, "‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤")
        return
    parts = message.text.strip().split()
    if len(parts) != 2 or not parts[1].isdigit():
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π: /delete <chat_id>")
        return
    del_id = int(parts[1])
    if del_id in DYNAMIC_WHITELIST:
        DYNAMIC_WHITELIST.remove(del_id)
        save_dynamic_whitelist(DYNAMIC_WHITELIST)
        bot.send_message(message.chat.id, f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {del_id} —É–¥–∞–ª—ë–Ω")
    else:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –¢–∞–∫–æ–≥–æ chat_id –Ω–µ—Ç —Å—Ä–µ–¥–∏ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö")

def tg_send(chat_id: int, text: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram –∏–∑ —Å–µ—Ä–≤–µ—Ä–Ω–æ–π –ª–æ–≥–∏–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ –≤–µ–±—Ö—É–∫–∞ Nicepay)."""
    if not TELEGRAM_BOT_TOKEN:
        return
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    try:
        requests.post(url, json={"chat_id": int(chat_id), "text": text}, timeout=10)
    except Exception:
        pass

# --- core: —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –≤ Nicepay (–ù–ï —Ö–æ–¥–∏–º –∫ —Å–µ–±–µ –ø–æ HTTP) ---
def create_payment_core(amount: int, chat_id: int, currency: str = "RUB"):
    # 1) –õ–∏–º–∏—Ç—ã (–ø–æ –¥–æ–∫–µ Nicepay)
    if currency == "RUB":
        if amount < 200 or amount > 85000:
            raise HTTPException(400, "Amount must be between 200 and 85000 RUB")
        amount_minor = amount * 100  # –∫–æ–ø–µ–π–∫–∏
    elif currency == "USD":
        if amount < 10 or amount > 990:
            raise HTTPException(400, "Amount must be between 10 and 990 USD")
        amount_minor = amount * 100  # —Ü–µ–Ω—Ç—ã
    else:
        raise HTTPException(400, "Unsupported currency")

    # 2) –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º order_id = "<chat_id>-<–∫–æ—Ä–æ—Ç–∫–∏–π_uuid>"
    order_id = f"{chat_id}-{uuid.uuid4().hex[:8]}"

    uniq = uuid.uuid4().hex[:4]
    customer_id = f"u{chat_id}{uniq}"

    # 3) –ó–∞–ø—Ä–æ—Å –≤ Nicepay
    payload = {
        "merchant_id": MERCHANT_ID,
        "secret":      SECRET_KEY,
        "order_id":    order_id,
        "customer":    customer_id,
        "account":     customer_id,
        "amount":      amount_minor,
        "currency":    currency,
        "description": "Top up from Telegram bot",
    }

    try:
        r = requests.post("https://nicepay.io/public/api/payment", json=payload, timeout=25)
        data = r.json()
    except Exception as e:
        raise HTTPException(502, f"Nicepay request failed: {e}")

    if data.get("status") == "success":
        link = (data.get("data") or {}).get("link")
        if not link:
            raise HTTPException(502, "Nicepay success without link")
        return {"payment_link": link, "order_id": order_id}
    else:
        msg = (data.get("data") or {}).get("message", "Unknown Nicepay error")
        raise HTTPException(400, f"Nicepay error: {msg}")

# --- Telegram handlers ---

# /getid ‚Äî –≤—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ—Ç (–±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ whitelist)
@bot.message_handler(commands=['getid'])
def getid(message):
    uid = message.chat.id
    uname = f"@{message.from_user.username}" if message.from_user and message.from_user.username else "‚Äî"
    bot.send_message(
        message.chat.id,
        f"–í–∞—à chat_id: {uid}\nusername: {uname}"
    )


@bot.message_handler(commands=['start'])
def start(message):
    if not has_access(message.chat.id):
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å", callback_data="pay_custom"))
    kb.add(types.InlineKeyboardButton("–ü—Ä–æ—Å–Ω–∏—Å—å", callback_data="wake_up"))
    bot.send_message(message.chat.id, "–ù–∞–∂–º–∏ ¬´–û–ø–ª–∞—Ç–∏—Ç—å¬ª, –∑–∞—Ç–µ–º –≤–≤–µ–¥–∏ —Å—É–º–º—É (200‚Äì85000 ‚ÇΩ).", reply_markup=kb)

@bot.callback_query_handler(func=lambda call: True)
def callback(call):
    if not has_access(call.message.chat.id):
        bot.answer_callback_query(call.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ (–º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å, —É–¥–æ–±–Ω–æ –≤–∏–¥–µ—Ç—å, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –ª–æ–≤–∏—Ç—Å—è)
    # bot.send_message(call.message.chat.id, f"–ö–Ω–æ–ø–∫–∞: {call.data}")

    if call.data == "wake_up":
        bot.answer_callback_query(call.id, "–Ø –Ω–∞ —Å–≤—è–∑–∏ ‚úÖ")
        return

    if call.data == "pay_custom":
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö (200‚Äì85000):")
        bot.register_next_step_handler(msg, handle_custom_amount)
        return

def handle_custom_amount(message):
    if not has_access(message.chat.id):
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    try:
        amt = int(message.text.strip())
        if amt < 200 or amt > 85000:
            bot.send_message(message.chat.id, "–°—É–º–º–∞ –≤–Ω–µ –ª–∏–º–∏—Ç–æ–≤ Nicepay (200‚Äì85000 ‚ÇΩ).")
            return
        # –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ core-—Ñ—É–Ω–∫—Ü–∏–∏ (–±–µ–∑ HTTP –∫ —Å–µ–±–µ)
        result = create_payment_core(amt, message.chat.id, "RUB")
        link = result.get("payment_link")
        oid  = result.get("order_id")
        bot.send_message(message.chat.id, f"–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É ({amt} ‚ÇΩ):\n{link}\n\nOrder ID: {oid}")
    except ValueError:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–µ–∑ –∫–æ–ø–µ–µ–∫.")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ ‚ùå\n{e}")
    
    msg = bot.send_message(
        message.chat.id,
        f"üí≥ –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É:\n{link}\n\nOrder ID: {oid}",
        disable_web_page_preview=True
    )
# –ó–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –º–æ–∂–Ω–æ –±—ã–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
    last_link_msg[message.chat.id] = {
        "message_id": msg.message_id,
        "order_id": oid,
        "base_text": f"üí≥ –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É:\n{link}\n\nOrder ID: {oid}"
    }

# --- Telegram webhook endpoint ---
@app.post("/tg-webhook")
async def tg_webhook(request: Request, x_telegram_bot_api_secret_token: str = Header(None)):
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∫—Ä–µ—Ç (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω)
    if TG_WEBHOOK_SECRET and x_telegram_bot_api_secret_token != TG_WEBHOOK_SECRET:
        # –¢—É—Ç –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å 403 ‚Äî Telegram —ç—Ç–æ –ø–æ–π–º—ë—Ç –∫–∞–∫ ¬´–Ω–µ –Ω–∞—à –∑–∞–ø—Ä–æ—Å¬ª.
        # –ù–æ 403 —Ç–æ–∂–µ —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç—Å—è –≤ last_error_message. –û—Å—Ç–∞–≤–∏–º –∫–∞–∫ –µ—Å—Ç—å.
        return {"ok": True}

    try:
        payload = await request.body()
        update = telebot.types.Update.de_json(payload.decode("utf-8"))
        bot.process_new_updates([update])
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º, –Ω–æ Telegram –≤—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º 200
        print("TG webhook error:", e)

    return {"ok": True}

# --- Nicepay webhook (GET) ---
@app.get("/webhook")
async def nicepay_webhook(request: Request):
    params = dict(request.query_params)
    received_hash = params.pop("hash", None)
    if not received_hash:
        raise HTTPException(400, "hash missing")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏: –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ {np} + SECRET –≤ –∫–æ–Ω—Ü–µ
    base = "{np}".join([v for _, v in sorted(params.items(), key=lambda x: x[0])] + [SECRET_KEY])
    calc_hash = hashlib.sha256(base.encode()).hexdigest()
    if calc_hash != received_hash:
        raise HTTPException(400, "bad hash")

    result   = params.get("result")
    order_id = params.get("order_id", "")

    # –î–µ–Ω–µ–∂–Ω—ã–µ –ø–æ–ª—è –∏–∑ –≤–µ–±—Ö—É–∫–∞
    amount_str = params.get("amount", "0")                 # –≤ –º–∏–Ω–æ—Ä–∞—Ö (–∫–æ–ø–µ–π–∫–∏/—Ü–µ–Ω—Ç—ã)
    amount_cur = params.get("amount_currency", "")
    profit_str = params.get("profit")                      # –º–æ–∂–µ—Ç –±—ã—Ç—å None
    profit_cur = params.get("profit_currency")             # –º–æ–∂–µ—Ç –±—ã—Ç—å None

    # –ö–æ–Ω–≤–µ—Ä—Ç–Ω—ë–º –º–∏–Ω–æ—Ä—ã -> –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –≤–∏–¥ –¥–ª—è RUB/USD (√∑100), –∏–Ω–∞—á–µ –æ—Å—Ç–∞–≤–∏–º –∫–∞–∫ –µ—Å—Ç—å
    def minor_to_human(x: str, cur: str) -> str:
        try:
            val = int(x)
        except Exception:
            return x  # –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –ø—Ä–∏—à–ª–æ –Ω–µ —á–∏—Å–ª–æ ‚Äî –≤–µ—Ä–Ω—ë–º –∫–∞–∫ –µ—Å—Ç—å

    # –ù–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ Nicepay —à–ª—ë—Ç –º–∏–Ω–æ—Ä—ã (√ó100) –¥–ª—è RUB, USD –∏ USDT
        if cur in ("RUB", "USD", "USDT"):
            return f"{val/100:.2f}"

    # –µ—Å–ª–∏ –ø–æ–ø–∞–¥—ë—Ç—Å—è –¥—Ä—É–≥–∞—è –≤–∞–ª—é—Ç–∞ ‚Äî –≤–µ—Ä–Ω—ë–º –∫–∞–∫ –µ—Å—Ç—å
        return str(val)


    amount_human = minor_to_human(amount_str, amount_cur)
    profit_human = minor_to_human(profit_str, profit_cur) if profit_str is not None else None

    # –î–æ—Å—Ç–∞—ë–º chat_id –∏–∑ order_id –≤–∏–¥–∞ "<chat_id>-<uuid>"
    chat_id = order_id.split("-", 1)[0] if "-" in order_id else None

    if result == "success" and chat_id:
        if profit_human is not None and profit_cur:
            text = f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –°—É–º–º–∞: {amount_human} {amount_cur} (–Ω–∞ —Å—á—ë—Ç: {profit_human} {profit_cur})"
        else:
            text = f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –°—É–º–º–∞: {amount_human} {amount_cur}"
        tg_send(chat_id, text)

    return {"ok": True}


# --- (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) —Ä—É—á–Ω–æ–π —Ä–æ—É—Ç –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ ---
@app.get("/create_payment")
def create_payment(amount: int, chat_id: int, currency: str = "RUB"):
    return create_payment_core(amount, chat_id, currency)

# --- health ---
@app.get("/health")
def health():
    return {"ok": True}
