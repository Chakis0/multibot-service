# --- imports ---
import os
import uuid
import hashlib
import json
from pathlib import Path
from collections import defaultdict
from typing import Dict, Any

import requests
from fastapi import FastAPI, Request, HTTPException, Header
from fastapi.responses import JSONResponse
import telebot
from telebot import types

# =============================
# Config & Helpers
# =============================

def env_json(name: str, default: Dict[str, Any] | None = None) -> Dict[str, Any]:
    raw = os.getenv(name)
    if not raw:
        return default or {}
    try:
        return json.loads(raw)
    except Exception:
        return default or {}

PUBLIC_BASE_URL   = os.getenv("PUBLIC_BASE_URL", "")
BOT_KEYS_CSV      = os.getenv("BOT_KEYS", "").strip()
BOT_KEYS          = [k.strip() for k in BOT_KEYS_CSV.split(",") if k.strip()]

TELEGRAM_TOKENS   = env_json("TELEGRAM_TOKENS")          # {bot_key: token}
TG_WEBHOOK_SECRETS= env_json("TG_WEBHOOK_SECRETS")       # {bot_key: secret}
MERCHANT_IDS      = env_json("MERCHANT_IDS")             # {bot_key: merchant_id}
SECRET_KEYS       = env_json("SECRET_KEYS")              # {bot_key: nicepay_secret}

# –ë–∞–∑–æ–≤—ã–π whitelist –æ–±—â–∏–π –¥–ª—è –≤—Å–µ—Ö –±–æ—Ç–æ–≤ (–º–æ–∂–Ω–æ –∫–∞—Å—Ç–æ–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å per-bot, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
BASE_WHITELIST = {958579430, 8051914154, 2095741832, 7167283179}

# –ü—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
if not BOT_KEYS:
    raise RuntimeError("BOT_KEYS –ø—É—Å—Ç. –£–∫–∞–∂–∏ —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π –±–æ—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä 'bot1,bot2'.")

for k in BOT_KEYS:
    if k not in TELEGRAM_TOKENS:
        raise RuntimeError(f"TELEGRAM_TOKENS –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–∫–µ–Ω –¥–ª—è '{k}'")
    if k not in TG_WEBHOOK_SECRETS:
        # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∑–∞–¥–∞—Ç—å
        TG_WEBHOOK_SECRETS[k] = os.getenv("TG_WEBHOOK_SECRET", "")
    if k not in MERCHANT_IDS:
        raise RuntimeError(f"MERCHANT_IDS –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç merchant_id –¥–ª—è '{k}'")
    if k not in SECRET_KEYS:
        raise RuntimeError(f"SECRET_KEYS –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç nicepay secret –¥–ª—è '{k}'")

# =============================
# App & State
# =============================
app = FastAPI()

# –°–ª–æ–≤–∞—Ä—å –±–æ—Ç–æ–≤: bot_key -> TeleBot
bots: Dict[str, telebot.TeleBot] = {}

# –ü–∞–º—è—Ç—å –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å–æ —Å—Å—ã–ª–∫–æ–π: {bot_key: {chat_id: {...}}}
last_link_msg: Dict[str, Dict[int, Dict[str, Any]]] = defaultdict(dict)

# –ú–∞–ø–ø–∏–Ω–≥ order_id -> (bot_key, chat_id, message_id)
order_map: Dict[str, Dict[str, Any]] = {}

# –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π whitelist per-bot: —Ñ–∞–π–ª—ã whitelist_<bot_key>.json —Ä—è–¥–æ–º —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
WHITELIST_DIR = Path("whitelists")
WHITELIST_DIR.mkdir(exist_ok=True)

def wl_file(bot_key: str) -> Path:
    return WHITELIST_DIR / f"whitelist_{bot_key}.json"

def load_dynamic_whitelist(bot_key: str) -> set[int]:
    p = wl_file(bot_key)
    if p.exists():
        try:
            return set(int(x) for x in json.loads(p.read_text(encoding="utf-8")))
        except Exception:
            return set()
    return set()

def save_dynamic_whitelist(bot_key: str, ids: set[int]) -> None:
    wl_file(bot_key).write_text(json.dumps(list(ids)), encoding="utf-8")

DYNAMIC_WHITELISTS: Dict[str, set[int]] = {k: load_dynamic_whitelist(k) for k in BOT_KEYS}


def has_access(bot_key: str, chat_id: int) -> bool:
    return (chat_id in BASE_WHITELIST) or (chat_id in DYNAMIC_WHITELISTS.get(bot_key, set()))


def fmt_rub(amount_int: int) -> str:
    return f"{amount_int:,}".replace(",", " ")

# =============================
# Bot factory (handlers per bot)
# =============================

def attach_handlers(bot_key: str, bot: telebot.TeleBot):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ö–µ–Ω–¥–ª–µ—Ä—ã –∫–æ–º–∞–Ω–¥ –∏ –∫–æ–ª–±–µ–∫–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞."""

    @bot.message_handler(commands=['getid'])
    def getid(message):
        bot.send_message(message.chat.id, f"–¢–≤–æ–π chat_id: {message.chat.id}")

    @bot.message_handler(commands=['info'])
    def info(message):
        if not has_access(bot_key, message.chat.id):
            bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return

        if message.chat.id not in last_link_msg[bot_key]:
            bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return

        try:
            raw = message.text[len("/info"):].strip()
            # –°–≤–æ–±–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç, –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∏ –±–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
            extra = ("
" + raw) if raw else ""
            base = last_link_msg[bot_key][message.chat.id].get("base_text", "")
            new_text = base + extra

            bot.edit_message_text(
                chat_id=message.chat.id,
                message_id= last_link_msg[bot_key][message.chat.id]["message_id"],
                text=new_text,
                disable_web_page_preview=True
            )
            last_link_msg[bot_key][message.chat.id]["base_text"] = new_text
        except Exception as e:
            bot.send_message(message.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")

    @bot.message_handler(commands=['link'])
    def set_link(message):
        if not has_access(bot_key, message.chat.id):
            bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return
        parts = message.text.split(maxsplit=1)
        if len(parts) < 2:
            bot.send_message(message.chat.id, "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π: /link <url> [–ª—é–±–æ–π —Ç–µ–∫—Å—Ç]")
            return
        tail = parts[1].strip()
        url = tail.split()[0]
        comment = tail[len(url):].strip()
        if not (url.startswith("http://") or url.startswith("https://")):
            bot.send_message(message.chat.id, "‚ö†Ô∏è –£–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL, –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å http(s)://")
            return

        text = f"üí≥ –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É:
{url}"
        if comment:
            text += "
" + comment

        try:
            if message.chat.id in last_link_msg[bot_key]:
                bot.edit_message_text(
                    chat_id=message.chat.id,
                    message_id= last_link_msg[bot_key][message.chat.id]["message_id"],
                    text=text,
                    disable_web_page_preview=True
                )
                last_link_msg[bot_key][message.chat.id]["base_text"] = text
            else:
                msg = bot.send_message(message.chat.id, text, disable_web_page_preview=True)
                last_link_msg[bot_key][message.chat.id] = {
                    "message_id": msg.message_id,
                    "order_id": "",
                    "base_text": text,
                }
            bot.send_message(message.chat.id, "‚úÖ –°—Å—ã–ª–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        except Exception as e:
            bot.send_message(message.chat.id, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Å—ã–ª–∫—É: {e}")

    @bot.message_handler(commands=['add'])
    def add_user(message):
        if message.chat.id not in BASE_WHITELIST:
            bot.send_message(message.chat.id, "‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤")
            return
        parts = message.text.strip().split()
        if len(parts) != 2 or not parts[1].isdigit():
            bot.send_message(message.chat.id, "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π: /add <chat_id>")
            return
        new_id = int(parts[1])
        DYNAMIC_WHITELISTS[bot_key].add(new_id)
        save_dynamic_whitelist(bot_key, DYNAMIC_WHITELISTS[bot_key])
        bot.send_message(message.chat.id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_id} –¥–æ–±–∞–≤–ª–µ–Ω")

    @bot.message_handler(commands=['delete'])
    def delete_user(message):
        if message.chat.id not in BASE_WHITELIST:
            bot.send_message(message.chat.id, "‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤")
            return
        parts = message.text.strip().split()
        if len(parts) != 2 or not parts[1].isdigit():
            bot.send_message(message.chat.id, "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π: /delete <chat_id>")
            return
        del_id = int(parts[1])
        if del_id in DYNAMIC_WHITELISTS[bot_key]:
            DYNAMIC_WHITELISTS[bot_key].remove(del_id)
            save_dynamic_whitelist(bot_key, DYNAMIC_WHITELISTS[bot_key])
            bot.send_message(message.chat.id, f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {del_id} —É–¥–∞–ª—ë–Ω")
        else:
            bot.send_message(message.chat.id, "‚ö†Ô∏è –¢–∞–∫–æ–≥–æ chat_id –Ω–µ—Ç —Å—Ä–µ–¥–∏ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö")

    @bot.message_handler(commands=['start'])
    def start(message):
        if not has_access(bot_key, message.chat.id):
            bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å", callback_data="pay_custom"))
        kb.add(types.InlineKeyboardButton("–ü—Ä–æ—Å–Ω–∏—Å—å", callback_data="wake_up"))
        bot.send_message(message.chat.id, "–ù–∞–∂–º–∏ ¬´–û–ø–ª–∞—Ç–∏—Ç—å¬ª, –∑–∞—Ç–µ–º –≤–≤–µ–¥–∏ —Å—É–º–º—É (200‚Äì85000 ‚ÇΩ).", reply_markup=kb)

    @bot.callback_query_handler(func=lambda call: True)
    def callback(call):
        # –í—Å–µ–≥–¥–∞ –±—ã—Å—Ç—Ä–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º callback, –∏–Ω–∞—á–µ Telegram —Ä—É–≥–∞–µ—Ç—Å—è "query is too old"
        try:
            bot.answer_callback_query(call.id)
        except Exception:
            pass

        if not has_access(bot_key, call.message.chat.id):
            return

        if call.data == "wake_up":
            return

        if call.data == "pay_custom":
            msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö (200‚Äì85000):")
            bot.register_next_step_handler(msg, handle_custom_amount)
            return

    def handle_custom_amount(message):
        if not has_access(bot_key, message.chat.id):
            bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return
        try:
            amt = int(message.text.strip())
            if amt < 200 or amt > 85000:
                bot.send_message(message.chat.id, "–°—É–º–º–∞ –≤–Ω–µ –ª–∏–º–∏—Ç–æ–≤ Nicepay (200‚Äì85000 ‚ÇΩ).")
                return
            result = create_payment_core(bot_key, amt, message.chat.id, "RUB")
            link = result.get("payment_link")
            oid  = result.get("order_id")

            text = f"üí≥ –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É ({fmt_rub(amt)} ‚ÇΩ):
{link}"
            msg = bot.send_message(message.chat.id, text, disable_web_page_preview=True)

            last_link_msg[bot_key][message.chat.id] = {
                "message_id": msg.message_id,
                "order_id": oid,
                "base_text": text
            }
            order_map[oid] = {
                "bot_key": bot_key,
                "chat_id": message.chat.id,
                "message_id": msg.message_id
            }
        except ValueError:
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–µ–∑ –∫–æ–ø–µ–µ–∫.")
        except Exception as e:
            bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ ‚ùå
{e}")

# =============================
# HTTP session with retries (Nicepay)
# =============================
from requests.adapters import HTTPAdapter, Retry

_session = requests.Session()
_retries = Retry(
    total=5,
    connect=5,
    read=5,
    backoff_factor=0.8,  # 0.8s, 1.6s, 3.2s, 6.4s, 12.8s
    status_forcelist=[429, 500, 502, 503, 504],
    allowed_methods=["POST"],
)
_session.mount("https://", HTTPAdapter(max_retries=_retries, pool_maxsize=20))

# =============================
# Payment core (per-bot merchant)
# =============================

def create_payment_core(bot_key: str, amount: int, chat_id: int, currency: str = "RUB") -> Dict[str, Any]:
    if currency == "RUB":
        if amount < 200 or amount > 85000:
            raise HTTPException(400, "Amount must be between 200 and 85000 RUB")
        amount_minor = amount * 100
    elif currency == "USD":
        if amount < 10 or amount > 990:
            raise HTTPException(400, "Amount must be between 10 and 990 USD")
        amount_minor = amount * 100
    else:
        raise HTTPException(400, "Unsupported currency")

    order_id = f"{bot_key}-{chat_id}-{uuid.uuid4().hex[:8]}"
    uniq = uuid.uuid4().hex[:4]
    customer_id = f"u{chat_id}{uniq}"

    payload = {
        "merchant_id": MERCHANT_IDS[bot_key],
        "secret":      SECRET_KEYS[bot_key],
        "order_id":    order_id,
        "customer":    customer_id,
        "account":     customer_id,
        "amount":      amount_minor,
        "currency":    currency,
        "description": f"Top up from Telegram bot ({bot_key})",
    }
    try:
        # Separate connect/read timeouts; give read more headroom
        r = _session.post(
            "https://nicepay.io/public/api/payment",
            json=payload,
            timeout=(12, 60),  # 5s connect, 45s read
        )
        data = r.json()
    except Exception as e:
        raise HTTPException(502, f"Nicepay request failed: {e}")

    if data.get("status") == "success":
        link = (data.get("data") or {}).get("link")
        if not link:
            raise HTTPException(502, "Nicepay success without link")
        return {"payment_link": link, "order_id": order_id}
    else:
        msg = (data.get("data") or {}).get("message", "Unknown Nicepay error")
        raise HTTPException(400, f"Nicepay error: {msg}")

# =============================
# HTTP endpoints
# =============================

@app.get("/health")
def health():
    return {"ok": True, "bots": BOT_KEYS}

@app.post("/tg-webhook/{bot_key}")
async def tg_webhook(bot_key: str, request: Request, x_telegram_bot_api_secret_token: str = Header(None)):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–∫–æ–π –±–æ—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if bot_key not in bots:
        return JSONResponse({"ok": True}, status_code=200)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∫—Ä–µ—Ç (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω)
    expected = TG_WEBHOOK_SECRETS.get(bot_key) or os.getenv("TG_WEBHOOK_SECRET", "")
    if expected and x_telegram_bot_api_secret_token != expected:
        # –º–æ–ª—á–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –Ω–æ 200 OK, —á—Ç–æ–±—ã TG –Ω–µ —Ä–µ—Ç—Ä–∞–∏–ª
        return {"ok": True}

    try:
        payload = await request.body()
        update = telebot.types.Update.de_json(payload.decode("utf-8"))
        bots[bot_key].process_new_updates([update])
    except Exception as e:
        print(f"TG webhook error ({bot_key}):", e)
    return {"ok": True}

@app.get("/webhook")
async def nicepay_webhook(request: Request):
    params = dict(request.query_params)
    received_hash = params.pop("hash", None)
    if not received_hash:
        raise HTTPException(400, "hash missing")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º bot_key: –±–µ—Ä—ë–º –∏–∑ order_id, —Ñ–æ—Ä–º–∞—Ç: <bot_key>-<chat_id>-<uuid8>
    order_id = params.get("order_id", "")
    bot_key = order_id.split("-", 1)[0] if "-" in order_id else None
    if not bot_key or bot_key not in SECRET_KEYS:
        raise HTTPException(400, "unknown bot_key in order_id")

    # –•—ç—à –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º Nicepay: —Å–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –ø–æ–ª—è (—É–∂–µ –±–µ–∑ hash), —Å–∫–ª–µ–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ {np}, –≤ –∫–æ–Ω–µ—Ü SECRET_KEY
    base = "{np}".join([v for _, v in sorted(params.items(), key=lambda x: x[0])] + [SECRET_KEYS[bot_key]])
    calc_hash = hashlib.sha256(base.encode()).hexdigest()
    if calc_hash != received_hash:
        raise HTTPException(400, "bad hash")

    result     = params.get("result")
    amount_str = params.get("amount", "0")
    amount_cur = params.get("amount_currency", "")
    profit_str = params.get("profit")
    profit_cur = params.get("profit_currency")

    def minor_to_human(x: str, cur: str) -> str:
        try:
            val = int(x)
        except Exception:
            return x
        if cur in ("RUB", "USD", "USDT"):
            return f"{val/100:.2f}"
        return str(val)

    amount_human = minor_to_human(amount_str, amount_cur)
    profit_human = minor_to_human(profit_str, profit_cur) if profit_str is not None else None

    # chat_id –±–µ—Ä—ë–º –∏–∑ order_id
    chat_id = None
    try:
        parts = order_id.split("-")
        if len(parts) >= 3:
            chat_id = int(parts[1])
    except Exception:
        pass

    if result == "success" and chat_id is not None:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –Ω—É–∂–Ω–æ–≥–æ –±–æ—Ç–∞
        try:
            b = bots.get(bot_key)
            if b:
                if profit_human and profit_cur:
                    text = f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –°—É–º–º–∞: {amount_human} {amount_cur} (–Ω–∞ —Å—á—ë—Ç: {profit_human} {profit_cur})"
                else:
                    text = f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –°—É–º–º–∞: {amount_human} {amount_cur}"
                b.send_message(chat_id, text)
        except Exception as e:
            print(f"send_message error ({bot_key}):", e)

    return {"ok": True}

@app.get("/create_payment")
def create_payment(amount: int, chat_id: int, currency: str = "RUB", bot_key: str = ""):
    if not bot_key or bot_key not in bots:
        raise HTTPException(400, "unknown or missing bot_key")
    return create_payment_core(bot_key, amount, chat_id, currency)

# =============================
# Bootstrap: init all bots
# =============================
for k in BOT_KEYS:
    tkn = TELEGRAM_TOKENS[k]
    b = telebot.TeleBot(tkn, threaded=False)
    attach_handlers(k, b)
    bots[k] = b

# –ì–æ—Ç–æ–≤–æ: —Ç–µ–ø–µ—Ä—å –≤–µ–±—Ö—É–∫–∏ —Å—Ç–∞–≤–∏–º –Ω–∞ /tg-webhook/<bot_key>
# –ü—Ä–∏–º–µ—Ä setWebhook –¥–ª—è bot1:
# https://api.telegram.org/bot<TOKEN_bot1>/setWebhook?url=<PUBLIC_BASE_URL>/tg-webhook/bot1&secret_token=<SECRET_bot1>
